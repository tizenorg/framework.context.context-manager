/*
 * Copyright (c) 2014 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * PROPRIETARY/CONFIDENTIAL
 *
 * This software is the confidential and proprietary information of SAMSUNG
 * ELECTRONICS ("Confidential Information"). You shall not disclose such
 * Confidential Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAMSUNG ELECTRONICS. SAMSUNG
 * make no representations or warranties about the suitability of the software,
 * either express or implied, including but not limited to the implied
 * warranties of merchantability, fitness for a particular purpose, or
 * non-infringement. SAMSUNG shall not be liable for any damages suffered by
 * licensee as a result of using, modifying or distributing this software or
 * its derivatives.
 * licensee arising out of or related to this software.
 *
 */

/**
 * @file	context_manager.h
 * @brief	These APIs are used to request to be notified if a context data is updated,
 *			or to get the current context data.
 */

#ifndef __TIZEN_SYSTEM_CONTEXT_MANAGER_H__
#define __TIZEN_SYSTEM_CONTEXT_MANAGER_H__

#include "context_manager_types.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * @addtogroup CAPI_SYSTEM_CONTEXT_MANAGER_MODULE
 * @{
 */

/**
 * @brief	Called when the result of a context operation is received.
 *
 * @param[in]	error		An error value. It can be one of the following error values:@n
 *							#CONTEXT_ERROR_NONE, if the operation succeeded.@n
 *							#CONTEXT_ERROR_UNSUPPORTED_CONTEXT, if the context item is not supported in the current profile.@n
 *							#CONTEXT_ERROR_UNSUPPORTED_OPERATION, if the operation is not supported for the context item.@n
 *							#CONTEXT_ERROR_OPERATION_FAILED, if the operation failed because of a system error.
 * @param[in]	context		The context item had passed to the operation function.
 * @param[in]	user_data	The user data had passed to the operation function.
 * @param[in]	req_id		The request ID had generated by the operation function.
 *
 * @see	context_register_scope()
 * @see	context_unregister_scope()
 * @see context_set_option()
 */
typedef void(* context_operation_result_cb)(int error, context_item_e context, void* user_data, int req_id);

/**
 * @brief	Called when an updated context data is available.
 *
 * @details	If no error occurs, the @c context_data points to a string containing the update context data.@n
 *			Otherwise, it will be @c NULL, and the registered callback function is automatically unregistered.@n
 *			context_context_data_get_int(), context_context_data_get_double(), and context_context_data_get_str()
 *			can be used to retrieve data values from the @c context_data.@n
 *
 * @param[in]	error		An error value. Except #CONTEXT_ERROR_NONE, it can be one of the following error values:@n
 *							#CONTEXT_ERROR_UNSUPPORTED_CONTEXT, if the context item is not supported in the current profile.@n
 *							#CONTEXT_ERROR_UNSUPPORTED_OPERATION, if the operation is not supported for the context item.@n
 *							#CONTEXT_ERROR_CONTEXT_NOT_REGISTERED, if context_get_context() is called for a context item
 *							that requires to be enabled in advance through context_set_changed_callback().@n
 *							#CONTEXT_ERROR_OPERATION_FAILED, if the operation failed because of a system error.
 * @param[in]	context		The context item had passed to the operation function.
 * @param[in]	context_data	The updated context data of the context item.
 * @param[in]	user_data	The user data had passed to the operation function.
 * @param[in]	req_id		The request ID had generated by the operation function.
 *
 * @remark	Note that the @c context_data should be freed explicitly to prevent possible memory leaks.
 */
typedef void(* context_context_update_cb)(int error, context_item_e context, char* context_data, void* user_data, int req_id);

/**
 * @brief	Get the current context data of the given context item.
 *
 * @param[in]	context		Context item to get the current context data.
 * @param[in]	option		Context-item-specific options.
 * @param[in]	callback	Callback function to receive the context data.
 * @param[in]	user_data	User data to be passed to the callback function.
 * @param[out]	req_id		Request ID generated by the function.
 *
 * @remark	Some context items' options are only allowed to be changed by specific apps.@n
 *			Please see \ref option_rules "here" for more details.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used. For example, the @c callback is NULL, or the @c option is malformed.
 * @retval	#CONTEXT_ERROR_INVALID_CONTEXT		The @c context is not a valid context item.
 * @retval	#CONTEXT_ERROR_CONTEXT_ALREADY_REGISTERED	A get context callback function for the @c context is already registered and not called yet.
 * @retval	#CONTEXT_ERROR_UNSUPPORTED_OPTION	The @c option contains an inappropriate option key.
 * @retval	#CONTEXT_ERROR_INVALID_OPTION		The @c option contains an invalid option value.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 *
 * @pre		For some context items, including #CONTEXT_ITEM_PEDOMETER, context_set_changed_callback() should be called in advance.
 *
 * @post	context_context_update_cb() will be invoked once.
 */
int context_get_context(context_item_e context, const char* option, context_context_update_cb callback, void* user_data, int* req_id);

/**
 * @brief	Register a callback function to be invoked when updated context data is available.
 *
 * @param[in]	context		Context item to get the updates of the related context data.
 * @param[in]	option		Context-item-specific options.
 * @param[in]	callback	Callback function to receive the context data.
 * @param[in]	user_data	User data to be passed to the callback function.
 * @param[out]	req_id		Request ID generated by the function.
 *
 * @remark	Some context items' options are only allowed to be changed by specific apps.@n
 *			Please see \ref option_rules "here" for more details.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used. For example, the @c callback is NULL, or the @c option is malformed.
 * @retval	#CONTEXT_ERROR_INVALID_CONTEXT		The @c context is not a valid context item.
 * @retval	#CONTEXT_ERROR_CONTEXT_ALREADY_REGISTERED	A callback function for the @c context is already registered.
 * @retval	#CONTEXT_ERROR_UNSUPPORTED_OPTION	The @c option contains an inappropriate option key.
 * @retval	#CONTEXT_ERROR_INVALID_OPTION		The @c option contains an invalid option value.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 *
 * @post	context_context_update_cb() will be invoked.
 */
int context_set_changed_callback(context_item_e context, const char* option, context_context_update_cb callback, void* user_data, int* req_id);

/**
 * @brief	Unregister the callback function for the given context item.
 *
 * @param[in]	context		Context item that does not need to be updated any longer.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_CONTEXT		The @c context is not a valid context item.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 */
int context_unset_changed_callback(context_item_e context);

/**
 * @brief	Set the context-item-specific options for the given context item.
 *
 * @param[in]	context		Context item to apply the new option.
 * @param[in]	option		Context-item-specific options.
 * @param[in]	callback	Callback function to receive the operation's result.
 * @param[in]	user_data	User data to be passed to the callback function.
 * @param[out]	req_id		Request ID generated by the function.
 *
 * @remark	Some context items' options are only allowed to be changed by specific apps.@n
 *			Please see \ref option_rules "here" for more details.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used. For example, the @c option is NULL or malformed.
 * @retval	#CONTEXT_ERROR_INVALID_CONTEXT		The @c context is not a valid context item.
 * @retval	#CONTEXT_ERROR_UNSUPPORTED_OPTION	The @c option contains an inappropriate option key.
 * @retval	#CONTEXT_ERROR_INVALID_OPTION		The @c option contains an invalid option value.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 *
 * @post	context_operation_result_cb() will be invoked.
 */
int context_set_option(context_item_e context, const char* option, context_operation_result_cb callback, void* user_data, int* req_id);

/**
 * @brief	Creates a new empty option string.
 *
 * @details	An option string can contain multiple pairs of option key and values.
 *			context_option_add_value_int(), context_option_add_value_double(), or
 *			context_option_add_value_str() can be used to add a pair of key and values.@n
 *
 * @return	An empty option string.
 *
 * @remark	Note that the memory allocated for the option will not be freed by
 *			context_set_option(), context_get_context(), and context_set_changed_callback().
 *			The allocated memory needs to be freed explicitly.
 */
char* context_option_new(void);

/**
 * @brief	Add an integer value to the option string.
 * @details	In most cases, one value can be assigned with a given option key.
 *			If this function is called multiple times with the same key,
 *			the corresponding value will be overwritten.@n
 *			However, some option keys, including #CONTEXT_ACTIVITY_NOTIFICATION_ACTIVITY_FILTER,
 *			allows to assign multiple values.
 *
 * @param[in,out]	option		Option string to add the key-value pair.
 * @param[in]		key			Option key.
 * @param[in]		value		Integer option value.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 */
int context_option_add_value_int(char** option, const char* key, int value);

/**
 * @brief	Add a double value to the option string.
 * @details	One value can be assigned with a given option key.
 *			If this function is called multiple times with the same key,
 *			the corresponding value will be overwritten.@n
 *
 * @param[in,out]	option		Option string to add the key-value pair.
 * @param[in]		key			Option key.
 * @param[in]		value		Double option value.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 */
int context_option_add_value_double(char** option, const char* key, double value);

/**
 * @brief	Add a string value to the option string.
 * @details	One value can be assigned with a given option key.
 *			If this function is called multiple times with the same key,
 *			the corresponding value will be overwritten.@n
 *
 * @param[in,out]	option		Option string to add the key-value pair.
 * @param[in]		key			Option key.
 * @param[in]		value		String option value.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 */
int context_option_add_value_str(char** option, const char* key, const char* value);

/**
 * @brief	Get an integer value from the context data received through context_context_update_cb().
 *
 * @param[in]	context_data	Context data containing the data value.
 * @param[in]	key				Context data key.
 * @param[out]	value			Integer data value.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 */
int context_context_data_get_int(char* context_data, const char* key, int* value);

/**
 * @brief	Get a double value from the context data received through context_context_update_cb().
 *
 * @param[in]	context_data	Context data containing the data value.
 * @param[in]	key				Context data key.
 * @param[out]	value			Double data value.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 */
int context_context_data_get_double(char* context_data, const char* key, double* value);

/**
 * @brief	Get a string value from the context data received through context_context_update_cb().
 *
 * @param[in]	context_data	Context data containing the data value.
 * @param[in]	key				Context data key.
 *
 * @return	A string on success, otherwise @c NULL.@n
 *			If not NULL, it is a deep-copied string, thus it needs to be freed explicitly.
 *
 * @remark	Note that if return value is not NULL, it needs to be freed explicitly.
 */
char* context_context_data_get_str(char* context_data, const char* key);

/**
 * @brief	Get the timestamp from the context data received through context_context_update_cb().
 *
 * @param[in]	context_data	Context data containing the data value.
 * @param[out]	ts				The timestamp of the context data in the number of milliseconds
 *								that have elapsed since midnight, January 1, 1970.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 */
int context_context_data_get_timestamp(char* context_data, int64_t* ts);

/**
 * @brief	Get an integer array from the context data received through context_context_update_cb().
 *
 * @param[in]	context_data	Context data containing the data value.
 * @param[in]	key				Context data key.
 * @param[out]	values			Integer data array. It needs to be freed explicitly.
 * @param[out]	length			Length of the array.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 *
 * @remark	@c values needs to be freed explicitly.
 */
int context_context_data_get_array_int(char* context_data, const char* key, int** values, int* length);

/**
 * @brief	Get a double array from the context data received through context_context_update_cb().
 *
 * @param[in]	context_data	Context data containing the data value.
 * @param[in]	key				Context data key.
 * @param[out]	values			Double data array. It needs to be freed explicitly.
 * @param[out]	length			Length of the array.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 *
 * @remark	@c values needs to be freed explicitly.
 */
int context_context_data_get_array_double(char* context_data, const char* key, double** values, int* length);

/**
 * @brief	Get the array of timestamps from the context data received through context_context_update_cb().
 *
 * @param[in]	context_data	Context data containing array data.
 * @param[out]	ts_values		Timestamp array. @c int64_t. It needs to be freed explicitly.
 * @param[out]	length			Length of the array.
 *
 * @return	0 on success, otherwise a negative error value.
 * @retval	#CONTEXT_ERROR_NONE					Successful.
 * @retval	#CONTEXT_ERROR_INVALID_PARAMETER	Invalid parameter used.
 * @retval	#CONTEXT_ERROR_OPERATION_FAILED		Operation failed because of a system error.
 *
 * @remark	@c ts_values needs to be freed explicitly.
 */
int context_context_data_get_array_timestamp(char* context_data, int64_t** ts_values, int* length);

/**
* @}
*/

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __TIZEN_SYSTEM_CONTEXT_MANAGER_H__
